services:
  mongo-primary:
    image: mongo:8.0
    container_name: mongo-primary
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_REPLICA_SET_NAME: ${MONGO_REPLICA_SET_NAME}
      MONGO_AUTH_DB: ${MONGO_AUTH_DB}
    ports:
      - ${MONGO_PRIMARY_PORT}:${MONGO_PRIMARY_PORT}
    volumes:
      - mongo-primary-data:/data/db
      - ./keyfile:/etc/mongo/keyfile
    networks:
      - mongo-cluster
    command:
      [
        "mongod",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME}",
        "--keyFile",
        "/etc/mongo/keyfile",
        "--bind_ip_all",
        "--port",
        "${MONGO_PRIMARY_PORT}",
      ]
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo-secondary1:
    image: mongo:8.0
    container_name: mongo-secondary1
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_REPLICA_SET_NAME: ${MONGO_REPLICA_SET_NAME}
      MONGO_AUTH_DB: ${MONGO_AUTH_DB}
    ports:
      - ${MONGO_SECONDARY1_PORT}:${MONGO_SECONDARY1_PORT}
    volumes:
      - mongo-secondary1-data:/data/db
      - ./keyfile:/etc/mongo/keyfile
    networks:
      - mongo-cluster
    command:
      [
        "mongod",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME}",
        "--keyFile",
        "/etc/mongo/keyfile",
        "--bind_ip_all",
        "--port",
        "${MONGO_SECONDARY1_PORT}",
      ]
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo-secondary2:
    image: mongo:8.0
    container_name: mongo-secondary2
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_REPLICA_SET_NAME: ${MONGO_REPLICA_SET_NAME}
      MONGO_AUTH_DB: ${MONGO_AUTH_DB}
    ports:
      - ${MONGO_SECONDARY2_PORT}:${MONGO_SECONDARY2_PORT}
    volumes:
      - mongo-secondary2-data:/data/db
      - ./keyfile:/etc/mongo/keyfile
    networks:
      - mongo-cluster
    command:
      [
        "mongod",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME}",
        "--keyFile",
        "/etc/mongo/keyfile",
        "--bind_ip_all",
        "--port",
        "${MONGO_SECONDARY2_PORT}",
      ]
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo-arbiter:
    image: mongo:8.0
    container_name: mongo-arbiter
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_REPLICA_SET_NAME: ${MONGO_REPLICA_SET_NAME}
      MONGO_AUTH_DB: ${MONGO_AUTH_DB}
    ports:
      - ${MONGO_ARBITER_PORT}:${MONGO_ARBITER_PORT}
    volumes:
      - ./keyfile:/etc/mongo/keyfile
    networks:
      - mongo-cluster
    command:
      [
        "mongod",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME}",
        "--keyFile",
        "/etc/mongo/keyfile",
        "--bind_ip_all",
        "--port",
        "${MONGO_ARBITER_PORT}",
      ]
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo-init-replica:
    image: mongo:8.0
    container_name: mongo-init-replica
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_REPLICA_SET_NAME: ${MONGO_REPLICA_SET_NAME}
      MONGO_AUTH_DB: ${MONGO_AUTH_DB}
    volumes:
      - ./keyfile:/etc/mongo/keyfile
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./.env:/docker-entrypoint-initdb.d/.env
    networks:
      - mongo-cluster
    depends_on:
      - mongo-primary
      - mongo-secondary1
      - mongo-secondary2
      - mongo-arbiter
    entrypoint: ["/bin/bash", "/docker-entrypoint-initdb.d/init.sh"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    container_name: mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: ${MONGO_EXPRESS_TARGET_DB}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo-primary:${MONGO_PRIMARY_PORT}
    ports:
      - ${MONGO_EXPRESS_PORT}:8081
    depends_on:
      mongo-primary:
        condition: service_healthy
    networks:
      - mongo-cluster
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mongo-primary-data:
  mongo-secondary1-data:
  mongo-secondary2-data:

networks:
  mongo-cluster:
    driver: bridge
